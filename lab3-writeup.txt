6.830 Lab 3 Write-Up

For Lab 3, I implemented standard logic for each section. Below is a rough outline of my approach:
- IntHistogram: this class is responsible for storing statistics for a set of values - particularly the values inserted into a table for a particualar field. My method for this class was to keep track of the min, the max, and the height of each bucket, where a "bucket" stores a particular range of values and "height" is the number of instances of said bucket. For calculating selectivity estimations, I followed the guide in the instructions, using the total number of tuples, as well as the height and width (range of values of given bucket) of the bucket of interest. One aspect of IntHistogram around which I spent some time vascillating is bucket calculation. Originally, I was calculating buckets by incremenally adding a fixed bucket size of (max - min) / numBuckets to a control variable that is iteratively compared against the value of interest. This implementation worked, but I was a bit uneasy about the loop operation, so I decided to modify approach. I decided that I would calculate the bucket in a closed-form fashion: divide the difference between the value of interest and min by the bucket size. One final optimization I implemented was to limit the number of buckets to (max - min)
- TableStats: this class was about building relevant statistics for a given table using IntHistograms for each field. The methods of this section were simplified by the access to methods of IntHistogram and StringHistogram.
- JoinOptimizer: This class is about calculating the estimated cardinality of joins and ordering for a particular set of joins. I implemented the Selinger optimizer and all tests are passing save for bigOrderJoins and QueryTest. These fails appear to be the cause of timeout, rather than core functionality. I will continue examining this problem.
- This lab took me about 3-4 days to complete.
