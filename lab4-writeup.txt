6.830 Lab 4 Write-Up

For Lab 4, I implemented page-wise two-phase locking, transaction commit/abort logic, and transaction detection/resolution. Below is a rough outline of my approach:
- LockManager.java: This class comprises the core innovation of this lab. In particular, this class is responsible for recording each type of lock held by transactions on each page. The key internal data strucures are the following:
  - xLocksPidToTid: mapping from PageId to TransactionId of individual transaction that holds exclusive lock on corresponding Page
  - sLocksPidToTid: mapping from PageId to set of TransactionIds of transactions that hold shared locks on corresponding Page
  - xLocksTidToPid: mapping from TransactionId to set of PageIds of Pages on which corresponding transaction holds exclusive locks
  - sLocksTidToPid: mapping from TransactionId to set of PageIds of Pages on which corresponding transaction holds shared locks
The core methods of interest are the following:
  - boolean acquireXLock(TransactionId tid, PageId pid, long dlTimeOut): Transaction corresponding to tid attempts to acquire an x-lock on Page corresponding to pid; returns true if lock is successfully acquired within dlTimeOut milliseconds and false otherwise
  - boolean acquireSLock(TransactionId tid, PageId pid, long dlTimeOut): Transaction corresponding to tid attempts to acquire an s-lock on Page corresponding to pid; returns true if lock is successfully acquired within dlTimeOut milliseconds and false otherwise
  - boolean holdsXLock(TransactionId tid, PageId pid): Ascertains whether Transaction corresponding to tid holds x-lock on Page corresponding to pid
  - boolean holdsSLock(TransactionId tid, PageId pid): Ascertains whether Transaction corresponding to tid holds s-lock on Page corresponding to pid
  - boolean holdsLock(TransactionId tid, PageId pid): Ascertains whether Transaction corresponding to tid holds x-lock or s-lock on Page corresponding to pid
  - void releasePage(TransactionId tid, PageId pid): Transaction corresponding to tid releases lock(s) on Page corresponding to pid
One of the challenges that came with this custom class for lock management was determining whether or not I needed an actual lock object to determine which transactions have access to which pages. It always made sense for me to simply maps to track this information, but for some reason, I kept second-guessing this approach, especially after reading some posts on Piazza. I am quite happy with my eventual approach. Another challenge was structuring the synchronized blocks. I eventually convinced myself that these blocks need to capture the logic both of checking and updating internal data structures.
- BufferPool.java: I made a couple of modifications to this class. The first of these was calling the appropriate lock acquisition method in getPage based on the Permissions parameter passed to it. Another change I made was the NO STEAL/FORCE buffer management policy. This involved making sure that dirty pages are not evicted if locked by and uncommitted transactions and that dirty pages are flushed to disk at commit time. This means that dirty pages should not be chosen as part of the eviction policy. This means that my pids set, which once stored all pids in the BufferPool now only stores that of clean pages, so that I can quickly refer to them at eviction time. My final changes were around transactionComplete, a method that is resposible for committing or aborting transactions, flushing dirty pages to disk in the former case and reloading from disk in the latter case, releasing locks after the fact.
- Locking Granularity: To reiterate, I used page-wise locking granularity, as suggested by the lab instructions. This seemed like it was the based approach for the SimpleDB system workload.
- Deadlock Detection/Resolution: To reiterate, I decided to use timeout as my deadlock detection technique. 50 milliseconds ended up being a fair threshold for this. If I found in acquireXLock or acquireSLock that this threshold was surpassed (signaled by false return value), I would throw a TransactionAbortedException in BufferPool's getPage method.
- This lab took me about a week to complete.
