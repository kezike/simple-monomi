package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate pred;
    private OpIterator child1;
    private OpIterator child2;
    private Tuple next1;
    private Tuple next2;
    private TupleDesc tupDesc1;
    private TupleDesc tupDesc2;
    private TupleDesc tupDesc;
    private OpIterator[] children;
    private boolean isOpen;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	this.pred = p;
    	this.child1 = child1;
    	this.child2 = child2;
        this.next1 = null;
        this.next2 = null;
    	try {
    	  this.child1.open();
          this.child2.open();
    	} catch (DbException dbExn) {
    	} catch (TransactionAbortedException txnAbExn) {
    	}
    	this.tupDesc1 = this.child1.getTupleDesc();
    	this.tupDesc2 = this.child2.getTupleDesc();
    	this.child1.close();
    	this.child2.close();
    	this.tupDesc = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.pred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
    	int field1 = this.pred.getField1();
    	return this.tupDesc1.getFieldName(field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	int field2 = this.pred.getField2();
    	return this.tupDesc2.getFieldName(field2);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	if (this.tupDesc == null) {
    		this.tupDesc = TupleDesc.merge(this.tupDesc1, this.tupDesc2);
    	}
        return this.tupDesc;
    }
    
    /**
     * Checks if iterator is open
     * @return open status
     */
    private void checkOpen() {
        if (!this.isOpen) {
          throw new IllegalStateException("Iterator is not open");
        }
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
        this.child1.open();
        this.child2.open();
        this.isOpen = true;
    }

    public void close() {
        // some code goes here
    	super.close();
        this.child1.close();
        this.child2.close();
        this.isOpen = false;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	this.checkOpen();
        this.child1.rewind();
        this.child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (this.next1 == null) {
          try {
            this.next1 = this.child1.next();
          } catch (NoSuchElementException nseExn) {
            return null;
          }
        }
        while (true) {
          while (this.child2.hasNext()) {
            this.next2 = this.child2.next();
            if (this.pred.filter(this.next1, this.next2)) {
              this.tupDesc = this.getTupleDesc();
              Tuple next = new Tuple(this.tupDesc);
              int numFlds1 = this.tupDesc1.numFields();
              int i;
              for (i = 0; i < numFlds1; i++) {
                Field fld1 = this.next1.getField(i);
                next.setField(i, fld1);
              }
              int numFlds2 = this.tupDesc2.numFields();
              int j;
              for (j = 0; j < numFlds2; j++) {
                Field fld2 = this.next2.getField(j);
                next.setField(i + j, fld2);
              }
              return next;
            }
          }
          try {
            this.next1 = this.child1.next();
          } catch (NoSuchElementException nseExn) {
            return null;
          }
          this.child2.rewind();
        }
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
    	return this.children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	this.children = children;
    }

}
